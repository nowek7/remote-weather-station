#!/bin/python3

import argparse
import json

CONTENT_CONFIG_FILE = '''/*
 * Autogenerated file from associations_cfg.py file.
 */

#pragma once

#include <chrono>

// Configuration for NTP
constexpr const char* NTP_PRIMARY = "pool.ntp.org";
constexpr const char* NTP_SECONDARY = "time.nist.gov";

// Time in seconds to expire token.
const int JWT_EXP_SECS = std::chrono::seconds(60 * 20).count();

// The size was computed from https://arduinojson.org/v6/assistant/
constexpr int CONFIG_SIZE = 512;

constexpr const char* CONFIG_FILE = R"(
{}
)";

constexpr const char* PRIVATE_KEY = R"(

)";

constexpr const char* ROOT_CERT = R"(

)";

'''

def handle_config_data(args) -> str:
    config = {
        'network': {
            'ssid': args.ssid,
            'password': args.password
        },
        'gcp': {
            "project_id": args.project_id,
            "cloud_region": args.cloud_region,
            "registry_id": args.registry_id,
            "device_id": args.device_id,
            "mqtt_bridge_hostname": args.mqtt_bridge_hostname,
            "mqtt_bridge_port": args.mqtt_bridge_port
        }
    }

    return json.dumps(config, allow_nan=False, indent=4)

parser = argparse.ArgumentParser(description='Write config file',
                                 allow_abbrev=False,
                                 formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=50))
parser.add_argument('--ssid', help='WIFI SSID', type=str)
parser.add_argument('--password', help='WIFI password', type=str)
parser.add_argument('--project_id', help='GCP project_id', type=str)
parser.add_argument('--cloud_region', help='GCP cloud_region', type=str)
parser.add_argument('--registry_id', help='GCP registry_id', type=str)
parser.add_argument('--device_id', help='GCP device_id', type=str)
parser.add_argument('--mqtt_bridge_hostname', help='GCP mqtt_bridge_hostname', type=str, default='mqtt.googleapis.com', required=False)
parser.add_argument('--mqtt_bridge_port', help='GCP mqtt_bridge_port', type=str, default=8883, required=False)

args = parser.parse_args()

with open("remote_weather_station/config.hpp", 'w') as file:
    config_data = handle_config_data(args)
    content = CONTENT_CONFIG_FILE.format(config_data)
    file.write(content)




